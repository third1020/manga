{"version":3,"sources":["Stack.tsx"],"names":["Stack","space","props","ref","children","direction","reversed","divider","size","resolvedProps","resolveResponsively","responsiveQueryContext","React","useContext","ResponsiveQueryContext","disableCSSMediaQueries","resolvedGap","gap"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AAEA;;AACA;;;;;;;;;;AA0BA,MAAMA,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,EAAmCC,GAAnC,KAAiD;AAC7D,QAAM;AACJC,IAAAA,QADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,OAJI;AAKJC,IAAAA,IALI;AAMJ,OAAGC;AANC,MAOG,uCACP,OADO,EAEP,EAAE,GAAGP,KAAL;AAAYM,IAAAA,IAAI,EAAEP;AAAlB,GAFO,EAGP,EAHO,EAIP;AAAES,IAAAA,mBAAmB,EAAE;AAAvB,GAJO,CAPT,CAD6D,CAe7D;;AACA,MAAI,kDAAsBR,KAAtB,CAAJ,EAAkC;AAChC,WAAO,IAAP;AACD,GAlB4D,CAoB7D;;;AACA,QAAMS,sBAAsB,GAAGC,eAAMC,UAAN,CAAiBC,+CAAjB,CAA/B;;AACA,QAAMC,sBAAsB,GAAGJ,sBAAsB,CAACI,sBAAtD,CAtB6D,CAwB7D;;AACA,QAAMC,WAAW,GAAG,qBAAS,OAAT,EAAkBR,IAAlB,CAApB;AAEA,sBACE,6BAAC,YAAD;AACE,IAAA,aAAa,EAAEH;AADjB,KAEMI,aAFN;AAGE,IAAA,GAAG,EAAEN,GAHP;AAIE,IAAA,KAAK,EAAEY,sBAAsB,GAAG,EAAH,GAAQ;AAAEE,MAAAA,GAAG,EAAED;AAAP;AAJvC,MAMG,8BACCZ,QADD,EAECI,IAFD,EAGCH,SAAS,KAAK,KAAd,GAAsB,GAAtB,GAA4B,GAH7B,EAICC,QAAQ,GAAG,SAAH,GAAe,QAJxB,EAKCC,OALD,CANH,CADF;AAgBD,CA3CD;;4BA6Ce,+BAAK,uBAAWP,KAAX,CAAL,C","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { default as Box } from '../Box';\nimport { getSpacedChildren } from '../../../utils';\nimport { usePropsResolution } from '../../../hooks/useThemeProps';\nimport type { IBoxProps } from '../Box';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport type { ResponsiveValue, SpaceType } from '../../types';\nimport { ResponsiveQueryContext } from '../../../utils/useResponsiveQuery/ResponsiveQueryProvider';\nimport { useToken } from '../../../hooks';\n\nexport interface IStackProps extends IBoxProps<IStackProps> {\n  /**\n   * The divider element to use between elements.\n   */\n  divider?: JSX.Element;\n  /**\n   * The space between each stack item. Accepts Responsive values\n   */\n  space?: ResponsiveValue<\n    'gutter' | '2xs' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | SpaceType\n  >;\n  /**\n   * Determines whether to reverse the direction of Stack Items.\n   */\n  reversed?: boolean;\n  /**\n   * The direction of the Stack Items.\n   * @default column\n   */\n  direction?: ResponsiveValue<\n    'column' | 'row' | 'column-reverse' | 'row-reverse'\n  >;\n}\n\nconst Stack = ({ space, ...props }: IStackProps, ref?: any) => {\n  const {\n    children,\n    direction,\n    reversed,\n    divider,\n    size,\n    ...resolvedProps\n  }: any = usePropsResolution(\n    'Stack',\n    { ...props, size: space },\n    {},\n    { resolveResponsively: [] }\n  );\n\n  //TODO: refactor for responsive prop\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const responsiveQueryContext = React.useContext(ResponsiveQueryContext);\n  const disableCSSMediaQueries = responsiveQueryContext.disableCSSMediaQueries;\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const resolvedGap = useToken('space', size);\n\n  return (\n    <Box\n      flexDirection={direction}\n      {...resolvedProps}\n      ref={ref}\n      style={disableCSSMediaQueries ? {} : { gap: resolvedGap }}\n    >\n      {getSpacedChildren(\n        children,\n        size,\n        direction === 'row' ? 'X' : 'Y',\n        reversed ? 'reverse' : 'normal',\n        divider\n      )}\n    </Box>\n  );\n};\n\nexport default memo(forwardRef(Stack));\n"]}