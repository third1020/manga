{"version":3,"sources":["index.ts"],"names":["MAX_KEY_LEN","resolveImageSource","source","Image","resolveAssetSource","uri","getColors","config","resolvedSrc","cache","cachedResult","key","getItem","result","RNImageColors","length","Error","setItem","ImageColors"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAIA,MAAMA,WAAW,GAAG,GAApB;;AAEA,MAAMC,kBAAkB,GAAIC,MAAD,IAAiD;AAC1E,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOA,MAAP;AACD,GAFD,MAEO;AACL,WAAOC,mBAAMC,kBAAN,CAAyBF,MAAzB,EAAiCG,GAAxC;AACD;AACF,CAND;;AAQA,MAAMC,SAA2C,GAAG,OAAOJ,MAAP,EAAeK,MAAf,KAA0B;AAC5E,QAAMC,WAAW,GAAGP,kBAAkB,CAACC,MAAD,CAAtC;;AAEA,MAAIK,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEE,KAAZ,EAAmB;AACjB,UAAMC,YAAY,GAAGH,MAAM,CAACI,GAAP,GACjBF,aAAMG,OAAN,CAAcL,MAAM,CAACI,GAArB,CADiB,GAEjBF,aAAMG,OAAN,CAAcJ,WAAd,CAFJ;AAIA,QAAIE,YAAJ,EAAkB,OAAOA,YAAP;AACnB;;AAED,QAAMG,MAAyB,GAAG,MAAMC,sBAAcR,SAAd,CACtCE,WADsC,EAEtCD,MAFsC,CAAxC;;AAKA,MAAIA,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEE,KAAZ,EAAmB;AAAA;;AACjB,QAAI,CAACF,MAAM,CAACI,GAAR,IAAeH,WAAW,CAACO,MAAZ,GAAqBf,WAAxC,EAAqD;AACnD,YAAM,IAAIgB,KAAJ,CACH,iIAAgIhB,WAAY,mCADzI,CAAN;AAGD;;AAEDS,iBAAMQ,OAAN,gBAAcV,MAAM,CAACI,GAArB,qDAA4BH,WAA5B,EAAyCK,MAAzC;AACD;;AAED,SAAOA,MAAP;AACD,CA3BD;;AA6BA,MAAMK,WAAgC,GAAG;AACvCZ,EAAAA,SADuC;AAEvCG,EAAAA,KAAK,EAALA;AAFuC,CAAzC;eAKeS,W","sourcesContent":["import { Image } from 'react-native'\nimport { RNImageColors } from './module'\nimport { cache } from './cache'\nimport type { ImageRequireSource } from 'react-native'\nimport type { ImageColorsResult, RNImageColorsModule } from './types'\n\nconst MAX_KEY_LEN = 500\n\nconst resolveImageSource = (source: string | ImageRequireSource): string => {\n  if (typeof source === 'string') {\n    return source\n  } else {\n    return Image.resolveAssetSource(source).uri\n  }\n}\n\nconst getColors: RNImageColorsModule['getColors'] = async (source, config) => {\n  const resolvedSrc = resolveImageSource(source)\n\n  if (config?.cache) {\n    const cachedResult = config.key\n      ? cache.getItem(config.key)\n      : cache.getItem(resolvedSrc)\n\n    if (cachedResult) return cachedResult\n  }\n\n  const result: ImageColorsResult = await RNImageColors.getColors(\n    resolvedSrc,\n    config\n  )\n\n  if (config?.cache) {\n    if (!config.key && resolvedSrc.length > MAX_KEY_LEN) {\n      throw new Error(\n        `You enabled caching, but you didn't pass a key. We fallback to using the image URI as the key. However the URI is longer than ${MAX_KEY_LEN}. Please pass a short unique key.`\n      )\n    }\n\n    cache.setItem(config.key ?? resolvedSrc, result)\n  }\n\n  return result\n}\n\nconst ImageColors: RNImageColorsModule = {\n  getColors,\n  cache,\n}\n\nexport default ImageColors\n"]}