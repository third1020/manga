{"version":3,"sources":["index.ts"],"names":["Image","RNImageColors","cache","MAX_KEY_LEN","resolveImageSource","source","resolveAssetSource","uri","getColors","config","resolvedSrc","cachedResult","key","getItem","result","length","Error","setItem","ImageColors"],"mappings":"AAAA,SAASA,KAAT,QAAsB,cAAtB;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SAASC,KAAT,QAAsB,SAAtB;AAIA,MAAMC,WAAW,GAAG,GAApB;;AAEA,MAAMC,kBAAkB,GAAIC,MAAD,IAAiD;AAC1E,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOA,MAAP;AACD,GAFD,MAEO;AACL,WAAOL,KAAK,CAACM,kBAAN,CAAyBD,MAAzB,EAAiCE,GAAxC;AACD;AACF,CAND;;AAQA,MAAMC,SAA2C,GAAG,OAAOH,MAAP,EAAeI,MAAf,KAA0B;AAC5E,QAAMC,WAAW,GAAGN,kBAAkB,CAACC,MAAD,CAAtC;;AAEA,MAAII,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEP,KAAZ,EAAmB;AACjB,UAAMS,YAAY,GAAGF,MAAM,CAACG,GAAP,GACjBV,KAAK,CAACW,OAAN,CAAcJ,MAAM,CAACG,GAArB,CADiB,GAEjBV,KAAK,CAACW,OAAN,CAAcH,WAAd,CAFJ;AAIA,QAAIC,YAAJ,EAAkB,OAAOA,YAAP;AACnB;;AAED,QAAMG,MAAyB,GAAG,MAAMb,aAAa,CAACO,SAAd,CACtCE,WADsC,EAEtCD,MAFsC,CAAxC;;AAKA,MAAIA,MAAJ,aAAIA,MAAJ,eAAIA,MAAM,CAAEP,KAAZ,EAAmB;AAAA;;AACjB,QAAI,CAACO,MAAM,CAACG,GAAR,IAAeF,WAAW,CAACK,MAAZ,GAAqBZ,WAAxC,EAAqD;AACnD,YAAM,IAAIa,KAAJ,CACH,iIAAgIb,WAAY,mCADzI,CAAN;AAGD;;AAEDD,IAAAA,KAAK,CAACe,OAAN,gBAAcR,MAAM,CAACG,GAArB,qDAA4BF,WAA5B,EAAyCI,MAAzC;AACD;;AAED,SAAOA,MAAP;AACD,CA3BD;;AA6BA,MAAMI,WAAgC,GAAG;AACvCV,EAAAA,SADuC;AAEvCN,EAAAA;AAFuC,CAAzC;AAKA,eAAegB,WAAf","sourcesContent":["import { Image } from 'react-native'\nimport { RNImageColors } from './module'\nimport { cache } from './cache'\nimport type { ImageRequireSource } from 'react-native'\nimport type { ImageColorsResult, RNImageColorsModule } from './types'\n\nconst MAX_KEY_LEN = 500\n\nconst resolveImageSource = (source: string | ImageRequireSource): string => {\n  if (typeof source === 'string') {\n    return source\n  } else {\n    return Image.resolveAssetSource(source).uri\n  }\n}\n\nconst getColors: RNImageColorsModule['getColors'] = async (source, config) => {\n  const resolvedSrc = resolveImageSource(source)\n\n  if (config?.cache) {\n    const cachedResult = config.key\n      ? cache.getItem(config.key)\n      : cache.getItem(resolvedSrc)\n\n    if (cachedResult) return cachedResult\n  }\n\n  const result: ImageColorsResult = await RNImageColors.getColors(\n    resolvedSrc,\n    config\n  )\n\n  if (config?.cache) {\n    if (!config.key && resolvedSrc.length > MAX_KEY_LEN) {\n      throw new Error(\n        `You enabled caching, but you didn't pass a key. We fallback to using the image URI as the key. However the URI is longer than ${MAX_KEY_LEN}. Please pass a short unique key.`\n      )\n    }\n\n    cache.setItem(config.key ?? resolvedSrc, result)\n  }\n\n  return result\n}\n\nconst ImageColors: RNImageColorsModule = {\n  getColors,\n  cache,\n}\n\nexport default ImageColors\n"]}