{"version":3,"sources":["module.web.ts"],"names":["Vibrant","getQuality","quality","getDominantSwatch","palette","dominant","highestPopulation","keys","Object","index","length","key","swatch","population","RNImageColors","getColors","src","config","fallback","img","Image","crossOrigin","vibrant","useWorker","getPalette","hex","darkVibrant","DarkVibrant","lightVibrant","LightVibrant","darkMuted","DarkMuted","lightMuted","LightMuted","muted","Muted","platform"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,cAApB;;AAIA,MAAMC,UAAU,GAAIC,OAAD,IAAwC;AACzD,UAAQA,OAAR;AACE,SAAK,QAAL;AACE,aAAO,EAAP;;AACF,SAAK,KAAL;AACE,aAAO,CAAP;;AACF,SAAK,MAAL;AACE,aAAO,KAAP;;AACF,SAAK,SAAL;AACE,aAAO,CAAP;;AACF;AACE,aAAOD,UAAU,CAAC,KAAD,CAAjB;AAVJ;AAYD,CAbD;;AAeA,MAAME,iBAAiB,GAAIC,OAAD,IAAsB;AAC9C,MAAIC,QAAQ,GAAGD,OAAO,CAAC,CAAD,CAAtB;AACA,MAAIE,iBAAiB,GAAG,CAAC,CAAzB;AAEA,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYH,OAAZ,CAAb;;AAEA,OAAK,IAAIK,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGF,IAAI,CAACG,MAAjC,EAAyCD,KAAK,EAA9C,EAAkD;AAChD,UAAME,GAAG,GAAGJ,IAAI,CAACE,KAAD,CAAhB;AACA,UAAMG,MAAM,GAAGR,OAAO,CAACO,GAAD,CAAtB;;AAEA,QAAIC,MAAM,IAAI,CAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEC,UAAR,IAAqBP,iBAAnC,EAAsD;AACpDD,MAAAA,QAAQ,GAAGO,MAAX;AACD;AACF;;AAED,SAAOP,QAAP;AACD,CAhBD;;AAkBA,OAAO,MAAMS,aAAa,GAAG;AAC3BC,EAAAA,SAAS,EAAE,OAAOC,GAAP,EAAoBC,MAApB,KAAgE;AAAA;;AACzE,UAAM;AAAEC,MAAAA;AAAF,QAAeD,MAArB;AAEA,QAAIE,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,IAAAA,GAAG,CAACH,GAAJ,GAAUA,GAAV;AACAG,IAAAA,GAAG,CAACE,WAAJ,GAAkB,WAAlB;AAEA,UAAMC,OAAO,GAAG,IAAItB,OAAJ,CAAYmB,GAAZ,EAAiB;AAC/BI,MAAAA,SAAS,EAAE,IADoB;AAE/BrB,MAAAA,OAAO,EAAED,UAAU,CAACgB,MAAM,CAACf,OAAR;AAFY,KAAjB,CAAhB;AAIA,UAAME,OAAO,GAAG,MAAMkB,OAAO,CAACE,UAAR,EAAtB;AAEA,WAAO;AACLnB,MAAAA,QAAQ,iDAAEF,iBAAiB,CAACC,OAAD,CAAnB,uDAAE,mBAA4BqB,GAA9B,yEAAqCP,QADxC;AAELI,MAAAA,OAAO,8CAAElB,OAAO,CAACJ,OAAV,qDAAE,iBAAiByB,GAAnB,uEAA0BP,QAF5B;AAGLQ,MAAAA,WAAW,mDAAEtB,OAAO,CAACuB,WAAV,yDAAE,qBAAqBF,GAAvB,yEAA8BP,QAHpC;AAILU,MAAAA,YAAY,qDAAExB,OAAO,CAACyB,YAAV,2DAAE,uBAAsBJ,GAAxB,yEAA+BP,QAJtC;AAKLY,MAAAA,SAAS,iDAAE1B,OAAO,CAAC2B,SAAV,uDAAE,mBAAmBN,GAArB,yEAA4BP,QALhC;AAMLc,MAAAA,UAAU,kDAAE5B,OAAO,CAAC6B,UAAV,wDAAE,oBAAoBR,GAAtB,yEAA6BP,QANlC;AAOLgB,MAAAA,KAAK,0CAAE9B,OAAO,CAAC+B,KAAV,mDAAE,eAAeV,GAAjB,mEAAwBP,QAPxB;AAQLkB,MAAAA,QAAQ,EAAE;AARL,KAAP;AAUD;AAxB0B,CAAtB","sourcesContent":["import Vibrant from 'node-vibrant'\nimport type { Palette } from 'node-vibrant/lib/color'\nimport type { Config, WebImageColors } from './types'\n\nconst getQuality = (quality: Config['quality']): number => {\n  switch (quality) {\n    case 'lowest':\n      return 10\n    case 'low':\n      return 5\n    case 'high':\n      return 1.333\n    case 'highest':\n      return 1\n    default:\n      return getQuality('low') as number\n  }\n}\n\nconst getDominantSwatch = (palette: Palette) => {\n  let dominant = palette[0]\n  let highestPopulation = -1\n\n  const keys = Object.keys(palette)\n\n  for (let index = 0; index < keys.length; index++) {\n    const key = keys[index]\n    const swatch = palette[key]\n\n    if (swatch && swatch?.population > highestPopulation) {\n      dominant = swatch\n    }\n  }\n\n  return dominant\n}\n\nexport const RNImageColors = {\n  getColors: async (src: string, config: Config): Promise<WebImageColors> => {\n    const { fallback } = config\n\n    let img = new Image()\n    img.src = src\n    img.crossOrigin = 'Anonymous'\n\n    const vibrant = new Vibrant(img, {\n      useWorker: true,\n      quality: getQuality(config.quality),\n    })\n    const palette = await vibrant.getPalette()\n\n    return {\n      dominant: getDominantSwatch(palette)?.hex ?? fallback,\n      vibrant: palette.Vibrant?.hex ?? fallback,\n      darkVibrant: palette.DarkVibrant?.hex ?? fallback,\n      lightVibrant: palette.LightVibrant?.hex ?? fallback,\n      darkMuted: palette.DarkMuted?.hex ?? fallback,\n      lightMuted: palette.LightMuted?.hex ?? fallback,\n      muted: palette.Muted?.hex ?? fallback,\n      platform: 'web',\n    }\n  },\n}\n"]}